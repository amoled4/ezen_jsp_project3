package controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.MemberVO;
import domain.PagingVO;
import handler.FileHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp; // 웹의 목적지 주소로 객체를 전달해주는 객체
	private BoardService bsv; // interface 구현체
	private int isOk; // DB의 insert, update, delete의 결과를 받는 변수
	private String destPage; // 목적지 주소를 저장해주는 변수
	
	private int bno;
	private String title;
	private String writer;
	private String regdate;
	private String content;
	private int readcount;
	private BoardVO bvo;
	private PagingVO pgvo;
	private int pageNo;  
	private int qty; 
	private String type;
	private String keyword;
	private String image;
	
	// 파일 경로를 저장할 변수
	private String savePath;
	private final String UTF8 = "utf-8";   // 인코딩 설정시
	
	private HttpSession ses;
    
    public BoardController() {
    	bsv = new BoardServiceImpl();
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		String uri = request.getRequestURI();
		log.info(">>> uri : " + uri);
		// /mem/join : 요청에 대한 path만 남기기
		String path = uri.substring(uri.lastIndexOf("/") + 1);
		log.info(">>> path : " + path);
		
		switch (path) {
		case "list":
			List<BoardVO> list = new ArrayList<BoardVO>();
			list = bsv.list();
			request.setAttribute("list", list);
			destPage="/board/list.jsp";
			break;
			
		case "page":
			try {
				pageNo = 1;
				qty = 10;
				type ="";
				keyword= "";
				if(request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>>type >"+type+" >>> keyword > "+keyword);	
				}
				if(request.getParameter("pageNo") !=null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				pgvo = new PagingVO(pageNo, qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>> pgvo > "+pgvo);
				// 전체 페이지 개수
				int totalCount = bsv.getTotal(pgvo);   // 전체 페이지 개수 DB에 요청
				log.info("전체 페이지 개수 : "+totalCount);
				// limit를 이용한 select List를 호출 (startPage, qty)
				// 한 페이지에 나와야 하는 리스트
				List<BoardVO> list1 = bsv.getPageList(pgvo);
				log.info(">>> list > "+list1.size());
				PagingHandler ph = new PagingHandler(pgvo, totalCount);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list1);
				log.info("pageList 성공");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;
			
		case "register":
			destPage="/board/register.jsp";
			break;
			
		case "insert":
//			ses = request.getSession();
//			title = request.getParameter("title");
//			writer = ((MemberVO)ses.getAttribute("ses")).getId();
//			content = request.getParameter("content");
//			bvo = new BoardVO(title, writer, content);
//			
//			isOk = bsv.insert(bvo);
//			log.info(">>> 글작성 > "+(isOk>0?"성공":"실패"));
//			destPage = "/brd/page";
//			break;
			
			try {
				// 파일을 업로드할 물리적인 경로를 설정
				savePath = getServletContext().getRealPath("/_fileUpload");
				log.info(">>> 파일저장경로 > "+savePath);
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				// 파일의 저장위치를 담고 있는 객체를 저장
				fileItemFactory.setRepository(fileDir);
				// 파일 저장을 위한 임시 메모리 용량 설정 : byte단위
				fileItemFactory.setSizeThreshold(2*1024*1024);    // 2MB
				
				bvo = new BoardVO();
				// multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString(UTF8));  // 인코딩 형식을 담아서 변환(안 하면 한글 깨짐)
						break;
					case "writer":
						bvo.setWriter(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image_file":
						// 이미지가 있는지 없는지 체크
						if(item.getSize()>0) {   // 데이터의 크기를 이용하여 값이 있는지 확인
							// 경로를 포함한 파일이름에서 파일이름.확장자만 가져오기
							String fileName = item.getName().substring(item.getName().lastIndexOf("/")+1);   
							// 현재시각을 밀리세컨드 단위로 반환
							fileName = System.currentTimeMillis()+"_"+fileName;
							log.info(">>> 파일이름 > "+fileName);
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							log.info("실제 파일 경로 : "+uploadFilePath);
							
							// 저장
							try {
								item.write(uploadFilePath);    // 자바 객체를 디스크에 쓰기
								bvo.setImage(fileName);
								
								// 섬네일 작업 => 리스트페이지에서 트래픽 과다사용 방지
								Thumbnails.of(uploadFilePath).size(75, 75).toFile(new File(fileDir+File.separator+"th_"+fileName));
							} catch (Exception e) {
								log.info(">>> file writer on disk fail");
								e.printStackTrace();
							}
						}
						break;
					}
				}
				
				isOk = bsv.insert(bvo);
				log.info(">>> 글작성 > "+(isOk>0?"성공":"실패"));
				
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="page";
			break;
			
		case "detail":
			bno = Integer.parseInt(request.getParameter("bno"));
			bvo = bsv.detail(bno);
			request.setAttribute("bvo", bvo);
			
			destPage="/board/detail.jsp";
			break;
			
		case "modify":
			bno = Integer.parseInt(request.getParameter("bno"));
			bvo = bsv.detail(bno);
			request.setAttribute("bvo", bvo);
			destPage="/board/modify.jsp";
			break;
			
		case "edit":
			try {
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(2*1024*1024);
				
				bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				log.info(">>> update 준비 완료");
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				
				String old_file = null;
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "bno":
						bvo.setBno(Integer.parseInt(item.getString(UTF8)));
						break;
					case "title":
						bvo.setTitle(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image":
						// 기존 파일의 이름을 가져와서 담기
						old_file = item.getString(UTF8);
						break;
					case "new_file":
						if(item.getSize()>0) {   // 새로운 파일이 등록됨
							if(old_file != null) {
								// 파일 핸들러 호출(기존 파일 삭제)
								FileHandler fileHandler = new FileHandler();
								isOk = fileHandler.deleteFile(old_file, savePath);
							}
							// 이름설정
							String fileName = item.getName().substring(item.getName().lastIndexOf(File.separator)+1);
							log.info(">>> new_fileName : "+fileName);
							// 실제 저장이름
							fileName = System.currentTimeMillis()+"_"+fileName;
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							try {
								item.write(uploadFilePath);
								bvo.setImage(fileName);
								log.info(">>> bvo.image > "+bvo.getImage());
								// 섬네일 작업
								Thumbnails.of(uploadFilePath).size(75, 75).toFile(new File(fileDir+File.separator+"th_"+fileName));
							} catch (Exception e) {
								// TODO: handle exception
								log.info(">>> file update on disk fail");
								e.printStackTrace();
							}
						}else {   // 새로운 파일을 넣지 않았다면...
							// 기존파일을 다시 bvo객체에 저장
							bvo.setImage(old_file);
						}
						break;
					}
				}
			isOk = bsv.edit(bvo);
			log.info(">>> 글 수정 > "+(isOk>0?"성공":"실패"));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="page";
			break;
//			bno = Integer.parseInt(request.getParameter("bno"));
//			title = request.getParameter("title");
//			content = request.getParameter("content");
//			bvo = new BoardVO(bno, title, content);
//			
//			isOk = bsv.edit(bvo);
//			log.info(">>> 글 수정 > "+(isOk>0?"성공":"실패"));
//			destPage = "/brd/page";
//			break;
			
		case "remove":
			bno = Integer.parseInt(request.getParameter("bno"));
			// 파일 삭제 추가
			image = request.getParameter("image");
			log.info(">>> 이미지가 있나여? >"+image);
			if(image != null) {
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				File deleteFilePath = new File(fileDir+File.separator+image);
				File deleteThFilePath = new File(fileDir+File.separator+"th_"+image);
				log.info(">>> 실제경로 > "+deleteFilePath);
				
				deleteFilePath.delete();
				deleteThFilePath.delete();
			}
			
			isOk = bsv.remove(bno);
			log.info(">>> 글 삭제 > "+(isOk>0?"성공":"실패"));
			destPage="/brd/page";
			break;
		}
		
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
